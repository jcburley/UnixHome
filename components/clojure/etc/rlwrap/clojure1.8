primitives-classnames
+'
decimal?
restart-agent
sort-by
macroexpand
ensure
chunk-first
tree-seq
unchecked-remainder-int
seq
reduce
when-first
find-ns
get-thread-bindings
contains?
every?
proxy-mappings
keep-indexed
cond->>
subs
ref-min-history
set
take-last
bit-set
gen-class
while
butlast
satisfies?
line-seq
unchecked-subtract-int
take-nth
first
re-groups
seq?
dec'
ns-unmap
println-str
with-bindings*
iterator-seq
iterate
slurp
newline
short-array
fn?
doall
prefers
enumeration-seq
dissoc
atom
import
bit-shift-right
print-method
peek
aget
pvalues
bound-fn
last
pr
namespace
push-thread-bindings
bases
=
dosync
remove-ns
take
vector?
thread-bound?
send-via
boolean
bit-shift-left
find-var
rand-int
aclone
chunk
dec
future-call
resultset-seq
struct
map
juxt
ns-publics
<
*source-path*
with-loading-context
test
rest
ex-data
compile
isa?
..
munge
delay
set-error-mode!
re-seq
char?
make-hierarchy
set-agent-send-executor!
keep
char
mapcat
unchecked-long
aset-long
some?
unchecked-negate
gen-interface
*command-line-args*
reverse
range
sort
-cache-protocol-fn
unchecked-inc-int
map-indexed
with-bindings
rand-nth
comp
await
spit
future-done?
*read-eval*
dorun
disj
*2
eval
cons
refer
print-dup
-reset-methods
floats
pos?
fnil
merge-with
nthrest
load
if-not
*verbose-defrecords*
sequential?
*print-level*
shuffle
boolean-array
find
alength
bit-xor
deliver
doseq
unsigned-bit-shift-right
neg?
var-set
unchecked-float
pmap
error-mode
num
reduced?
disj!
float?
aset-float
deftype
bean
booleans
ns-unalias
when-let
int-array
set?
inc'
flush
take-while
vary-meta
<=
alter
-'
if-some
conj!
repeatedly
zipmap
alter-var-root
biginteger
remove
*
re-pattern
min
pop!
chunk-append
prn-str
with-precision
format
reversible?
shutdown-agents
conj
bound?
lazy-seq
*print-length*
*file*
compare-and-set!
*use-context-classloader*
await1
let
ref-set
pop-thread-bindings
interleave
printf
map?
->
defstruct
*err*
get
doto
identity
into
areduce
long
double
definline
nfirst
meta
find-protocol-impl
bit-and-not
*default-data-reader-fn*
var?
method-sig
unchecked-add-int
unquote-splicing
hash-ordered-coll
future
reset-meta!
cycle
fn
seque
empty?
short
definterface
filterv
hash
quot
ns-aliases
read
unchecked-double
key
longs
not=
string?
aset-double
unchecked-multiply-int
chunk-rest
pcalls
*allow-unresolved-vars*
remove-all-methods
ns-resolve
as->
aset-boolean
trampoline
when-not
*1
vec
*print-meta*
when
int
ns-refers
rand
second
vector-of
hash-combine
>
replace
associative?
unchecked-int
set-error-handler!
keyword?
force
bound-fn*
namespace-munge
group-by
prn
extend
unchecked-multiply
some->>
default-data-readers
->VecSeq
even?
unchecked-dec
double-array
in-ns
create-ns
re-matcher
defn
ref
bigint
extends?
promise
aset-char
rseq
construct-proxy
agent-errors
*compile-files*
*math-context*
float
pr-str
concat
aset-short
set-agent-send-off-executor!
ns
symbol
to-array-2d
mod
amap
pop
use
unquote
declare
dissoc!
reductions
aset-byte
ref-history-count
-
assoc!
hash-set
reduce-kv
or
cast
reset!
name
ffirst
sorted-set
counted?
byte-array
println
extend-type
macroexpand-1
assoc-in
char-name-string
bit-test
defmethod
EMPTY-NODE
time
memoize
alter-meta!
future?
zero?
require
unchecked-dec-int
persistent!
nnext
add-watch
not-every?
class?
rem
agent-error
some
future-cancelled?
memfn
struct-map
drop
*data-readers*
nth
sorted?
nil?
extend-protocol
split-at
*e
load-reader
cond->
dotimes
select-keys
bit-and
list*
reify
update-in
prefer-method
aset-int
*clojure-version*
*'
instance?
with-open
mix-collection-hash
re-find
val
defonce
unchecked-add
loaded-libs
->Vec
not
with-meta
the-ns
record?
type
identical?
unchecked-divide-int
ns-name
max-key
*unchecked-math*
defn-
*out*
file-seq
agent
ns-map
set-validator!
defprotocol
swap!
vals
unchecked-subtract
*warn-on-reflection*
sorted-set-by
sync
assert
*compile-path*
true?
release-pending-sends
print
empty
remove-method
*in*
print-ctor
letfn
/
read-line
bit-or
clear-agent-errors
vector
proxy-super
>=
drop-last
not-empty
distinct
partition
loop
add-classpath
bit-flip
long-array
descendants
merge
accessor
integer?
mapv
partition-all
partition-by
numerator
object-array
with-out-str
condp
derive
load-string
special-symbol?
ancestors
subseq
error-handler
gensym
cond
ratio?
delay?
intern
print-simple
flatten
doubles
with-in-str
remove-watch
ex-info
ifn?
some->
proxy-name
ns-interns
all-ns
find-protocol-method
subvec
for
binding
partial
chunked-seq?
find-keyword
replicate
min-key
reduced
char-escape-string
re-matches
array-map
unchecked-byte
with-local-vars
ns-imports
send-off
defmacro
every-pred
keys
rationalize
load-file
distinct?
extenders
unchecked-short
methods
odd?
->ArrayChunk
float-array
*3
alias
frequencies
read-string
proxy
rsubseq
inc
get-method
with-redefs
bit-clear
filter
locking
list
+
split-with
aset
->VecNode
keyword
*ns*
destructure
*assert*
defmulti
chars
str
next
hash-map
if-let
underive
ref-max-history
false?
*print-readably*
ints
class
some-fn
case
*flush-on-newline*
to-array
bigdec
list?
bit-not
io!
xml-seq
byte
max
==
*agent*
lazy-cat
comment
parents
count
supers
*fn-loader*
sorted-map-by
apply
interpose
deref
assoc
rational?
transient
clojure-version
chunk-cons
comparator
sorted-map
send
drop-while
proxy-call-with-super
realized?
char-array
resolve
compare
complement
*compiler-options*
*print-dup*
defrecord
with-redefs-fn
sequence
constantly
get-proxy-class
make-array
shorts
update-proxy
unchecked-negate-int
hash-unordered-coll
repeat
unchecked-inc
nthnext
and
create-struct
get-validator
number?
await-for
chunk-next
print-str
not-any?
into-array
init-proxy
chunk-buffer
symbol?
when-some
unchecked-char
->>
future-cancel
var-get
commute
coll?
get-in
fnext
denominator
bytes
refer-clojure
union
map-invert
join
select
intersection
superset?
index
subset?
rename
rename-keys
project
difference
tag
*sb*
*state*
*stack*
element
*current*
content
content-handler
parse
startparse-sax
emit
attrs
emit-element
rightmost
insert-child
left
path
leftmost
append-child
branch?
children
remove
down
replace
zipper
end?
edit
make-node
vector-zip
node
up
insert-right
rights
root
next
seq-zip
insert-left
prev
right
lefts
xml-zip
