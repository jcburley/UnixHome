#!/bin/bash

[ -r ~/.debug-profiles ] && echo -e "\n\n$0: bash_profile: running" && env

# NOTE: git bash 4.4.12(2)-release (x86_64-pc-msys) (git version
# 2.16.0.windows.2) sets $USERNAME instead of $USER
[ -z "$USER" ] && export USER="$USERNAME"

export BASH_PROFILE_HAS_RUN=true

export UNIXHOME="${HOME}/.unixhome"
export UNIX_PSP="${UNIXHOME}/etc/sessions/${USER}@$(hostname)"

# Alert if .unixhome has upstream updates:
(cd $UNIXHOME
 GRU=$(git remote update 2>&1)
 if [ "$GRU" != "Fetching origin" ]; then
     printf "\nNOTE: ${UNIXHOME} has updates:\n${GRU}\n\n"
 fi)

# Ensure 'path' utility is in $PATH.
if ! which path >/dev/null 2>&1; then
    for d in /usr/local/bin; do
        [ -x "$d/path" ] && PATH="${d}${PATH:+:${PATH}}"
    done
    if ! which path >/dev/null 2>&1; then
        echo >&2 "$0: ${UNIXHOME}/etc/bash_profile: ERROR: 'path' utility not in \$PATH"
        sleep 10  # So Windows shows the error before the window closes
        exit 99
    fi
fi

[ -r ${UNIXHOME}/etc/functions ] && . ${UNIXHOME}/etc/functions

# Pull in .profile, which e.g. MacPorts creates to prepend to $PATH.
[ -r ~/.profile ] && . ~/.profile

# Get the aliases and functions.
if ! alias BASHRC_HAS_RUN >/dev/null 2>&1 && [ -r $HOME/.bashrc ]; then
    source $HOME/.bashrc
    alias BASHRC_HAS_RUN=true  # Just in case it isn't our .bashrc.
fi

PATHDIRS="$HOME/bin $HOME/googlesource/depot_tools"

for pd in $PATHDIRS; do
    [ -d "$pd" ] && PATH=$(path --append "$pd")
done

export PATH

# Per 'brew install bash-completion' on Mac OS X:
[ -r /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

# If system has a known manpath configuration file, ensure $MANPATH
# begins with a colon, which means use the config.  Otherwise, ensure
# it has certain canonical directories.

if [ -r /etc/man.conf -o -r /etc/manpath.config ]; then
    MANPATH="$(eval path \"$MANPATH\" --prepend \"\")"
else
    for d in /usr/man /usr/local/man /usr/share/man /usr/local/share/man /usr/X11/man /usr/X11R6/man /opt/man; do
        [ -d "$d" ] && MANPATH="$(eval path \"$MANPATH\" --append \"$d\")"
    done
fi

if [ -d /var/qmail/man ]; then
    MANPATH="$(eval path \"$MANPATH\" --append /var/qmail/man)"
fi

export GITBASE=git@github.com:jcburley

export MANPATH

if [ -n "$PS1" ]; then
    # Use Emacs if installed. (Git bash which does not support -s.)
    if which emacs >/dev/null 2>&1; then
        if [ -n "$SSH_CLIENT" ]; then
            EMACS="emacs -nw"
        else
            EMACS="emacs"
        fi
        export EDITOR="$EMACS"
        export GIT_EDITOR="$EMACS"
        export VISUAL="$EMACS"
    fi

    # Taken from /usr/share/bash-completion/bash_completion on my
    # Ubuntu 16.04 system, substituting "pushd" for "cd":
    if shopt -q cdable_vars; then
        complete -v -F _cd -o nospace pushd
    else
        complete -F _cd -o nospace pushd
    fi

    # Don't export CDPATH, and set it only for interactive sessions, per:
    #   https://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/
    CDPATH=$(eval path \"\" --prepend .)
    [ -d ~/github ] && CDPATH=$(eval path \"$CDPATH\" --append ~/github)
    for d in ~/github/*; do
        CDPATH=$(eval path \"$CDPATH\" --prepend \"$d\")
    done
    [ -d ~/gitdove ] && CDPATH=$(eval path \"$CDPATH\" --append ~/gitdove)

    # Get git goodness in prompts. See bashrc for PS1 and PROMPT_COMMAND
    # definitions including $SHLVL. NOTE: __git_ps1 rewrites $PS1!!
    export PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
    export PROMPT_COMMAND='__git_ps1 "\u@\h:\w" "\\\$ "'

    export GIT_PS1_SHOWDIRTYSTATE=t
    export GIT_PS1_SHOWSTASHSTATE=t
    export GIT_PS1_SHOWUPSTREAM="verbose name"
fi

# Pull in per-session profile, if any.

[ -r "$UNIX_PSP/profile" ] && . "$UNIX_PSP/profile"

if [ -n "$PS1" ]; then
    if [ -d "$UNIX_PSP/cdpath_dirs" ]; then
        for DF in "$UNIX_PSP/cdpath_dirs"/*; do
            if [ ! -r "$DF" ]; then
                continue
            fi
            DIR=$(grep -v '^[[:space:]]*\(#.*\)\?$' "$DF" | head -1)
            [ -d "$DIR" ] && CDPATH=$(eval path \"$CDPATH\" --append "$DIR")
        done
    fi
fi

# GoLang
if [ -n "$GOROOT" ]; then
    :
elif which go >/dev/null 2>&1; then
    export GOROOT=$(go env GOROOT)
    if [ "$GOROOT" = "$(readink /usr/local/go)" ]; then
        GOROOT=/usr/local/go
    fi
elif [ -d /usr/local/go ]; then
    export GOROOT=$(/usr/local/go/bin/go env GOROOT)
fi
if [ -n "$GOROOT" -a -d "$GOROOT" ]; then
    if which cygpath >/dev/null 2>&1; then
        GOROOT="$(cygpath -u "$GOROOT")"
    fi
    if ! which go >/dev/null 2>&1; then
        PATH=$(path --prepend "$GOROOT/bin")
    fi
fi
if [ -d "$HOME/.go" -a ! -d "$HOME/go" ]; then
    echo >&2 "NOTICE: Renaming $HOME/.go to $HOME/go"
    mv -iv "$HOME/.go" "$HOME/go"
fi
if [ -n "$GOPATH" -a -d "$GOPATH" ]; then
    :
elif [ -r "$UNIX_PSP/gopath" ]; then
    GOPATH=$(grep -v '^[[:space:]]*\(#.*\)\?$' "$UNIX_PSP/gopath" | head -1)
elif [ -d "$HOME/go" ]; then
    GOPATH="$HOME/go"
fi
if [ -n "$GOPATH" -a -d "$GOPATH" ]; then
    export GOLOCALROOT=~/github/golang/go
    export GOLOCALBIN=$GOLOCALROOT/bin
    if which cygpath >/dev/null 2>&1; then
        GOPATH="$(cygpath -u "$GOPATH")"
        GOLOCALROOT="$(cygpath -u "$GOLOCALROOT")"
        GOLOCALBIN="$(cygpath -u "$GOLOCALBIN")"
    fi
    GOBIN="$GOPATH"/bin
    PATH=$(path --prepend "$GOBIN")
    export GOORIGROOT="$GOROOT"
    if [ -n "$PS1" ]; then
        for d in "$GOPATH"/src/github.com/*; do
            CDPATH=$(eval path \"$CDPATH\" --prepend \"$d\")
        done
        CDPATH=$(eval path \"$CDPATH\" --append \"$GOPATH\"/src/github.com)
    fi
    export GOPATH GOBIN
fi
